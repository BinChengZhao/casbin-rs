initSidebarItems({"enum":[["EvalAltResult","Evaluation result."],["ParseErrorType","Type of error encountered when parsing a script."]],"fn":[["calc_fn_hash","Calculate a `u64` hash key from a module-qualified function name and parameter types."]],"macro":[["def_package","Macro that makes it easy to define a package (which is basically a shared module) and register functions into it."]],"mod":[["de","Deserialization support for `serde`."],["packages","Module containing all built-in packages available to Rhai, plus facilities to define custom packages."],["ser","Serialization support for `serde`."]],"struct":[["AST","Compiled AST (abstract syntax tree) of a Rhai script."],["Dynamic","Dynamic type containing any value."],["Engine","Rhai main scripting engine."],["EvalContext","Context of a script evaluation process."],["Expression","An expression sub-tree in an AST."],["FnPtr","A general function pointer, which may carry additional (i.e. curried) argument values to be passed onto a function during a call."],["ImmutableString","The system immutable string type."],["Module","An imported module, which may contain variables, sub-modules, external Rust functions, and script-defined functions."],["ParseError","Error when parsing a script."],["Position","A location (line number + character position) in the input script."],["Scope","Type containing information about the current scope. Useful for keeping state between `Engine` evaluation runs."]],"trait":[["RegisterFn","Trait to register custom functions with the `Engine`."],["RegisterResultFn","Trait to register fallible custom functions returning `Result<Dynamic, Box<EvalAltResult>>` with the `Engine`."]],"type":[["Array","Variable-sized array of `Dynamic` values."],["INT","The system integer type."],["IteratorFn","A standard function that gets an iterator from a type."],["Map","Hash map of `Dynamic` values with `ImmutableString` keys."]]});